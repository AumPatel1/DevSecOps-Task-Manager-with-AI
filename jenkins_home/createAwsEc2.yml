---
# Enhanced AWS EC2 Instance Creation with Security Best Practices
# This playbook creates secure test instances for DevSecOps pipeline

- name: Create secure test instances
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    keyname: "{{ lookup('env', 'AWS_KEY_NAME') | default('devsecops-key') }}"
    instance_type: "{{ lookup('env', 'INSTANCE_TYPE') | default('t3.micro') }}"
    security_group: "{{ lookup('env', 'SECURITY_GROUP') | default('devsecops-test-sg') }}"
    image: "{{ lookup('env', 'AMI_ID') | default('ami-0be057a22c63962cb') }}"
    region: "{{ lookup('env', 'AWS_REGION') | default('eu-west-2') }}"
    vpc_subnet_id: "{{ lookup('env', 'VPC_SUBNET_ID') | default('subnet-02a17e56e6827124a') }}"
    tagname: "Name=DevSecOps-TestServer"
    instance_count: "{{ lookup('env', 'INSTANCE_COUNT') | default(1) | int }}"
    spot_instance: "{{ lookup('env', 'SPOT_INSTANCE') | default('false') | bool }}"
    encrypted_volume: "{{ lookup('env', 'ENCRYPTED_VOLUME') | default('true') | bool }}"

  tasks:
    - name: Validate AWS credentials
      aws_caller_info:
        region: "{{ region }}"
      register: aws_info

    - name: Display AWS account information
      debug:
        msg: "Using AWS Account: {{ aws_info.account_id }} in region {{ region }}"

    - name: Create or update SSH key pair
      ec2_key:
        name: "{{ keyname }}"
        key_material: "{{ lookup('file', '~/.ssh/{{ keyname }}.pub') }}"
        region: "{{ region }}"
        state: present
      register: key_result

    - name: Create security group for test instances
      ec2_group:
        name: "{{ security_group }}"
        description: "Security group for DevSecOps test instances"
        region: "{{ region }}"
        vpc_id: "{{ lookup('env', 'VPC_ID') | default('vpc-default') }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "{{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }}"
            rule_desc: "SSH from Jenkins"
          - proto: tcp
            ports:
              - 10007
            cidr_ip: "{{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }}"
            rule_desc: "Web application port"
          - proto: tcp
            ports:
              - 80
            cidr_ip: "{{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }}"
            rule_desc: "WAF port"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: "All outbound traffic"
      register: sg_result

    - name: Create test instances
      block:
        - name: Launch EC2 instances
          ec2:
            key_name: "{{ keyname }}"
            group: "{{ security_group }}"
            instance_type: "{{ instance_type }}"
            image: "{{ image }}"
            wait: true
            region: "{{ region }}"
            vpc_subnet_id: "{{ vpc_subnet_id }}"
            assign_public_ip: yes
            instance_tags: "{{ tagname }}"
            count: "{{ instance_count }}"
            exact_count: "{{ instance_count }}"
            state: present
            volumes:
              - device_name: /dev/sda1
                ebs:
                  volume_size: 20
                  volume_type: gp3
                  encrypted: "{{ encrypted_volume }}"
                  delete_on_termination: true
            user_data: |
              #!/bin/bash
              # Security hardening script
              set -e
              
              # Update system
              apt-get update
              apt-get upgrade -y
              
              # Install security tools
              apt-get install -y \
                fail2ban \
                ufw \
                unattended-upgrades \
                auditd \
                rkhunter \
                chkrootkit
              
              # Configure firewall
              ufw --force enable
              ufw default deny incoming
              ufw default allow outgoing
              ufw allow from {{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }} to any port 22
              ufw allow from {{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }} to any port 10007
              ufw allow from {{ lookup('env', 'JENKINS_IP') | default('0.0.0.0/0') }} to any port 80
              
              # Configure fail2ban
              systemctl enable fail2ban
              systemctl start fail2ban
              
              # Configure automatic security updates
              echo 'Unattended-Upgrade::Automatic-Reboot "true";' >> /etc/apt/apt.conf.d/50unattended-upgrades
              echo 'Unattended-Upgrade::Automatic-Reboot-Time "02:00";' >> /etc/apt/apt.conf.d/50unattended-upgrades
              
              # Install Docker and Docker Compose
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              usermod -aG docker ubuntu
              systemctl enable docker
              systemctl start docker
              
              # Install additional tools
              apt-get install -y \
                python3 \
                python3-pip \
                git \
                make \
                curl \
                wget \
                htop \
                tree
              
              # Create application directory
              mkdir -p /opt/app
              chown ubuntu:ubuntu /opt/app
              
              # Set up monitoring
              echo "*/5 * * * * root /usr/bin/df -h >> /var/log/disk-usage.log" >> /etc/crontab
              echo "*/5 * * * * root /usr/bin/free -m >> /var/log/memory-usage.log" >> /etc/crontab
              
              # Security audit logging
              echo "0 2 * * * root /usr/bin/lynis audit system --quick" >> /etc/crontab
              
              # Reboot to apply updates
              reboot
          register: ec2_result

        - name: Wait for instances to be running
          ec2_instance_info:
            instance_ids: "{{ item.id }}"
            region: "{{ region }}"
          register: instance_info
          until: instance_info.instances[0].state.name == 'running'
          retries: 30
          delay: 10
          loop: "{{ ec2_result.instances }}"

        - name: Wait for SSH to be available
          wait_for:
            host: "{{ item.private_ip }}"
            port: 22
            state: started
            timeout: 300
          loop: "{{ ec2_result.instances }}"

        - name: Add instances to inventory
          lineinfile:
            dest: "~/ansible_hosts"
            regexp: "{{ item.private_ip }}"
            insertafter: "[tstlaunched]"
            line: "{{ item.private_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/{{ keyname }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
            state: present
          loop: "{{ ec2_result.instances }}"

        - name: Display instance information
          debug:
            msg: |
              Created {{ ec2_result.instances | length }} instance(s):
              {% for instance in ec2_result.instances %}
              - Instance ID: {{ instance.id }}
                Private IP: {{ instance.private_ip }}
                Public IP: {{ instance.public_ip }}
                State: {{ instance.state }}
              {% endfor %}

      rescue:
        - name: Cleanup on failure
          ec2:
            instance_ids: "{{ ec2_result.instances | map(attribute='id') | list }}"
            state: absent
            region: "{{ region }}"
          when: ec2_result is defined and ec2_result.instances is defined
          ignore_errors: yes

        - name: Display error message
          debug:
            msg: "Failed to create instances. Check AWS credentials and configuration."

    - name: Create instance tags for cost tracking
      ec2_tag:
        resource: "{{ item.id }}"
        region: "{{ region }}"
        tags:
          Name: "DevSecOps-Test-{{ item.id }}"
          Environment: "test"
          Project: "DevSecOps"
          Owner: "Security Team"
          CostCenter: "Security"
          AutoShutdown: "true"
          Backup: "false"
      loop: "{{ ec2_result.instances }}"
      when: ec2_result is defined and ec2_result.instances is defined

    - name: Store instance information for later use
      copy:
        content: |
          # DevSecOps Test Instances
          # Created: {{ ansible_date_time.iso8601 }}
          {% for instance in ec2_result.instances %}
          {{ instance.id }}:{{ instance.private_ip }}:{{ instance.public_ip }}
          {% endfor %}
        dest: "~/test_instances.txt"
      when: ec2_result is defined and ec2_result.instances is defined

    - name: Set fact for test environment
      set_fact:
        test_instances: "{{ ec2_result.instances }}"
      when: ec2_result is defined and ec2_result.instances is defined                    
